///////////////////////////////////////////////////////////


1)Что такое fetch зачем он нужен как он работает?

        Fetch() принимает один обязательный аргумент — путь к ресурсу, который вы хотите получить, простыми словами
        это метод, используемый для получения ресурса.

        пример:

        function fetchCountry(countryName) {
            fetch(`https://restcountries.com/v3.1/name/${countryName}`)
                .then((response) => response.json())
                .then((data) => renderCountry(data))
        }

        Эта функция автоматически передаёт ответ от сервера в качестве параметра (название страны , флаг ...).
        Response:представляет ответ на запрос.

///////////////////////////////////////////////////////////////


2)  Что такое promise и написать пример кода.

        Промисы — идеальный выбор для обработки асинхронных операций.
        Они могут легко обрабатывать несколько асинхронных операций и обеспечивают лучшую обработку ошибок.
        Другими словами, мы также можем сказать, что Промисы являются идеальным выбором для
        улучшение читаемости кода, улучшение обработка асинхронных операций, улучшение обработки ошибок.
        Она может находиться в трех состояниях: Ожидание ответа; Успешное выполнение; Выход ошибкой;

        Пример:
        const count = true;

        let countValue = new Promise(function (resolve, reject) {
            if (count) {
                resolve("There is a count value.");
            } else {
                reject("There is no count value");
            }
        });

        console.log(countValue);

////////////////////////////////////////////////////////////////////

3) Контекст JS

        Контекст выполнения — это, если говорить упрощённо, концепция, описывающая окружение,
         в котором производится выполнение кода на JavaScript. Код всегда выполняется внутри некоего контекста.

        Первое, что сделает движок JavaScript - создаст глобальный контекст выполнения,
        и тем самым даст нам две вещи: глобальный объект (global object), и ключевое слово this.
        this- обращение к кому-то элементу в зависимости от окружения,
        может быть глобальным, находится внутри функции.
        Может либо ссылаться на определенный объект, либо иметь любое значение.

        let user = {
            name: 'Begimai Mukaeva',
            getName: function() {
                console.log(this.name);
            }
        };
        user.getName();   // Begimai Mukaeva

/////////////////////////////////////////////////////////////////////////////

4) Стрелочные функции?

        Существует ещё более простой и краткий синтаксис для создания функций, который часто используется.
        Он называется «стрелочные функции».
        пример:   let sum = (a, b) => a + b;

        На самом деле отличий стрелочной функции почти нет — это такие же функции, как и обычные. Например,
         let sum = (a, b) => a + b; — это то же самое, как если бы мы сделали так:

        let sum = function(a, b) {
          return a + b;
        };

        Они лексически привязаны к значению this (но не привязаны к собственному this, arguments...).
        Выражение стрелочных функций не позволяют задавать имя, поэтому стрелочные функции анонимны,
        если их ни к чему не присвоить.

//////////////////////////////////////////////////////////////////////////////

5)Конструкция async\ await

         С помощью async-функций возможно организовать работу с асинхронным кодом в синхронном стиле.
         Асинхронная (async) функция возвращает промис.Await – это ключевое слово,
         которое используется в асинхронных функциях для того,
         чтобы указать, что здесь необходимо дождаться завершения промиса.

        const load = async () => {
            const a = await Promise.resolve('I'm');
            const b = await Promise.resolve('Begimai');
            return a + b;
        };
        load().then(value => console.log(value));

//////////////////////////////////////////////////////////////////////////////////////////
